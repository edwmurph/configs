" ln -s ${HOME}/code/personal/configs/dotfiles/vimrc ${HOME}/.vimrc
syntax on

"------------ vim-plugs --------------

" install vim-plug if necessary
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" GENERAL
  " adds indent visualization
  Plug 'Yggdroot/indentLine'
  " autocloses chars that have matching closing counterparts
  Plug 'Townk/vim-autoclose'
  " async lint engine
  Plug 'w0rp/ale'
  " file explorer
  Plug 'scrooloose/nerdtree'
  " collection of lang packs
  Plug 'sheerun/vim-polyglot'
  " javascript syntax + folding + concealing chars
  "Plug 'pangloss/vim-javascript'
  "Plug 'mxw/vim-jsx'
  Plug 'chemzqm/vim-jsx-improve'
  Plug 'posva/vim-vue'
  " theme
  Plug 'joshdick/onedark.vim'
  " highlights all matches in file while searching
  Plug 'haya14busa/incsearch.vim'
  " <Tab> for simple insert completion
  Plug 'ervandew/supertab'
  " Git integration features like :GBlame
  Plug 'tpope/vim-fugitive'
  Plug 'junegunn/gv.vim'
  " fzf expected to be installed with homebrew
  Plug '/usr/local/opt/fzf'
  Plug 'junegunn/fzf.vim'
  " align imports
  Plug 'junegunn/vim-easy-align'
  " autoclose html
  Plug 'alvan/vim-closetag'

" R
  "Plug 'janko-m/vim-test'
  "Plug 'jalvesaq/Nvim-R'

" PYTHON
  Plug 'vim-scripts/indentpython.vim'
  Plug 'python-mode/python-mode', { 'branch': 'develop' }

call plug#end()

"-------------- general configs -------------


let mapleader=" "

" general
syntax on
set encoding=utf-8
set noerrorbells
set colorcolumn=80
set autoindent

" tabbing default to hard tabs of width 2 spaces
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

" Stop word wrapping
set nowrap
" Except on markdown files
  autocmd FileType markdown setlocal wrap
" on bottom bar, display line #, column # and relative position of cursor in file
set ruler
" enable backspace to delete over line breaks or auto-inserted indents
set backspace=indent,eol,start
" display line numbers
set number
" highlight all search matches
set hlsearch
" enable cursor movement by clicking with mouse
set mouse=a
" enable vue syntax highlighting
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
" change dir to .swp files
set directory=$HOME/.vim/swapfiles//

" Not sure if these are needed
  set laststatus=2


"-------------- plugin-specific configs -------------

" sheerun/vim-polyglot
  let g:polyglot_disabled = ['json', 'jsx', 'javascript', 'vue']

" pangloss/vim-javascript
  set conceallevel=1
  "let g:javascript_conceal = 1

" alvan/vim-closetag
  let g:closetag_filenames = '*.html,*.vue,*.js'

" junegunn/vim-easy-align
  " remove ignore groups
  let g:easy_align_ignore_groups = []

" w0rp/ale configs
  " dont lint every time text changes
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_fixers = ['eslint']

" Yggdroot/indentLine configs
  " customize indentLine char
  let g:indentLine_enabled = 1
  let g:indentLine_char = "â”‚"
  let g:indentLine_conceallevel=1
  let g:indentLine_fileTypeExclude = ['tex', 'markdown', 'json']

" ervandew/supertab configs
  " let <CR> select completion selection
  let g:SuperTabCrMapping = 1
  let g:SuperTabClosePreviewOnPopupClose = 1
  let g:SuperTabDefaultCompletionType = "context"
  set completeopt=menuone,noinsert,preview

" junegunn/gv.vim
  " display unfoleded git diffs
  autocmd FileType git set foldlevel=1

" python-mode/python-mode
  " lint on save
  let g:pymode_lint_on_write = 1
  let g:pymode_lint_cwindow = 0



"------------ theme ---------------

let g:onedark_color_overrides = {
\ "comment_grey": {"gui": "#8a8a8a", "cterm": "245", "cterm16": "grey" },
\}

syntax on
colorscheme onedark
set termguicolors


"------------- mappings -----------


" INSERT MODE

  " save file
  " go to normal mode
  imap <Leader>; <Esc>
  imap <Leader>;<Leader> <Esc> :w <Enter>

  imap <Leader><Leader>c console.log(``);<ESC>2hi
  imap <Leader><Leader>j JSON.stringify(, null, 2)<ESC>9hi
  imap <Leader>tc try {} catch ( err<ESC>lla {}<ESC>17hi


" NORMAL MODE

  " save file
  nmap <Leader>; <Esc> :w <Enter>

  " Ctrl-space opens fuzzy file search
  nmap <C-@> :FZF <Enter>

  " Ctrl-n toggles nerdtree panel
  nmap <C-n> :NERDTreeToggle<CR>

  " text insert shortcuts
  nmap <Leader><Leader>c aconsole.log(``);<ESC>2hi
  nmap <Leader><Leader>j aJSON.stringify(, null, 2)<ESC>9hi
  nmap <Leader><Leader>m adef main(args: Array[String]): Unit = {}<ESC>i
  nmap <Leader><Leader>d aconst delay = ( ms ) => new Promise( r => setTimeout( r, ms )<ESC>0

  " Ctrl-i sorts scala imports
  nmap <C-i> :SortScalaImports<CR>

  " buffer shifts
  nmap <C-j> <C-e>
  nmap <C-k> <C-y>
  nmap <C-down> <C-e>
  nmap <C-up> <C-y>
  nmap <C-S-down> <C-d> zz
  nmap <C-S-up> <C-u> zz

  " prevent default shift cursor behavior of <space> in normal mode
  nmap <SPACE> <Nop>

  " space-# searches project for word under cursor
  nmap <Leader># :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

  " quick-fix navigations
  " next
  nmap <Leader>qn :cn <CR>
  " prev
  nmap <Leader>qp :cp <CR>
  " close quick-fix window
  nmap <Leader>qc :ccl <CR>

  " ctag navigation
  nmap <Leader>gd <C-]>
  nmap <Leader>gn :tn<CR>
  nmap <Leader>gp :tp<CR>
  nmap <Leader>go <C-t>

  " override / to use incsearch
  nmap / <Plug>(incsearch-forward)

  " align imports
  nmap <Leader>ea <Plug>(EasyAlign)

  " ale
  nmap <Leader>af :ALEFix<CR>
  nmap <leader>an :ALENext<cr>
  nmap <leader>ap :ALEPrevious<cr>

  " python-mode
  nmap <Leader>afp :PymodeLintAuto<cr>



" VISUAL MODE

  " save file
  vmap <Leader>; <Esc> :w <Enter>

  " Ctrl-c copies visual selection to clipboard
  vmap <C-c> "+y<CR>"

  " align imports
  vmap <Leader>ea <Plug>(EasyAlign)

"---------- custom commands --------


" GV plugin is a better alternative to this
command Hist ! git log --pretty=format:"\%C(yellow)>>>|\%h|\%Cred\%ad|\%Cblue\%an|\%Creset\%s" --date=format:"\%Y-\%m-\%d \%H:\%M" -p $(echo %) | sed -e '/>>>|/{n;N;N;N;d;}' | sed -e 's/\(^-.*$\)/'$(printf "\033[91m")'\1'$(printf "\033[0m")'/g' | sed -e 's/\(^+.*$\)/'$(printf "\033[92m")'\1'$(printf "\033[0m")'/g'


"-------------- python configs -------------

filetype plugin on
filetype indent on
set omnifunc=syntaxcomplete#Complete
let g:pymode_virtualenv_path = '/anaconda3/envs/ds'

au FileType python
    \ set tabstop=4 softtabstop=4 shiftwidth=4 autoindent fileformat=unix


"------------- R configs -------------------

" set vim-r-plugin to
"let r_indent_align_args = 0

" Set vim-r-plugin to mimics ess :
"let r_indent_ess_comments = 0
"let r_indent_ess_compatible = 0

"nmap , <Plug>RDSendLine
"vmap , <Plug>RDSendSelection
"let g:R_tmux_split = 1
"let g:R_term = 'tmux'
"let g:R_term_cmd = 'tmux split-window -c "#{pane_current_path}"'

