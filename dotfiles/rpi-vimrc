" ln -s ${HOME}/code/personal/configs/dotfiles/vimrc ${HOME}/.vimrc

"------------ vim-plugs --------------

" install vim-plug if necessary
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" GENERAL
  " autocloses chars that have matching closing counterparts
  Plug 'Townk/vim-autoclose'
  " async lint engine
  Plug 'dense-analysis/ale'
  " collection of lang packs
  " conflicts with jsdoc in vim-jsx-improve
  Plug 'sheerun/vim-polyglot'
  " theme
  Plug 'joshdick/onedark.vim'
  " highlights all matches in file while searching
  Plug 'haya14busa/incsearch.vim'
  " <Tab> for simple insert completion
  Plug 'ervandew/supertab'
  " Git integration features like :GBlame
  Plug 'tpope/vim-fugitive'
  Plug 'junegunn/gv.vim'

call plug#end()

"-------------- general configs -------------


let mapleader=" "

" general
syntax on
set encoding=utf-8
set noerrorbells
set colorcolumn=80
set autoindent

" tabbing default to hard tabs of width 2 spaces
set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

" Stop word wrapping
set nowrap
" Except on markdown files
autocmd FileType markdown setlocal wrap
" on bottom bar, display line #, column # and relative position of cursor in file
set ruler
" add file name to bottom bar: laststatus=2
set laststatus=2
" enable backspace to delete over line breaks or auto-inserted indents
set backspace=indent,eol,start
" display line numbers
set number
" highlight all search matches
set hlsearch
" enable cursor movement by clicking with mouse
set mouse=a


"-------------- plugin-specific configs -------------

" junegunn/vim-easy-align
  " remove ignore groups
  let g:easy_align_ignore_groups = []

" dense-analysis/ale configs
  " dont lint every time text changes
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_fixers = ['eslint']
  let g:ale_linters = {
\   'javascript': ['eslint'],
\}
  let g:ale_pattern_options = {
\   '.*\.json$': {'ale_enabled': 0},
\}

" Yggdroot/indentLine configs
  " customize indentLine char
  let g:indentLine_enabled = 1
  let g:indentLine_char = "â”‚"
  let g:indentLine_conceallevel=1
  let g:indentLine_fileTypeExclude = ['tex', 'markdown', 'json']

" ervandew/supertab configs
  " let <CR> select completion selection
  let g:SuperTabCrMapping = 1
  let g:SuperTabClosePreviewOnPopupClose = 1
  let g:SuperTabDefaultCompletionType = "context"
  set completeopt=menuone,noinsert,preview

" junegunn/gv.vim
  " display unfolded git diffs
  autocmd FileType git set foldlevel=1



"------------ theme ---------------

let g:onedark_color_overrides = {
\ "comment_grey": {"gui": "#8a8a8a", "cterm": "245", "cterm16": "grey" },
\}

syntax on
colorscheme onedark
set termguicolors


"------------- mappings -----------

function! InsertText(str)
  normal :AutoCloseOff<CR>
  execute "normal! i" a:str
  normal :AutoCloseOn<CR>
  return
endfunction

function! InsertLine(str)
  normal :AutoCloseOff<CR>
  call append(line('.'), a:str)
  normal :AutoCloseOn<CR>
  normal 0j
  return
endfunction


" INSERT MODE

  " save file
  " go to normal mode
  imap <Leader>; <Esc>
  imap <Leader>;<Leader> <Esc> :w <Enter>

  " text inserts
  imap <Leader><Leader>con <ESC>:call InsertLine("console.log(  );")<CR>13li
  imap <Leader><Leader>jso <ESC>:call InsertLine("JSON.stringify( , null, 2 );")<CR>16li
  imap <Leader><Leader>tc <ESC>:call InsertLine("try {} catch {}")<CR>5li
  imap <Leader><Leader>it <ESC>:call InsertLine("it( '', () => {});")<CR>5li
  imap <Leader><Leader>des <ESC>:call InsertLine("describe( '', () => {});")<CR>11li
  imap <Leader><Leader>wa <ESC>:call InsertLine("const wait = ( ms ) => new Promise( r => setTimeout( r, ms ) );")<CR><CR>

  " sync syntax
  imap <Leader><Leader>s <Esc>:syntax sync fromstart<Enter>li

" NORMAL MODE

  " save file
  nmap <Leader>; <Esc> :w <Enter>

  " Ctrl-space opens fuzzy file search
  nmap <C-@> :FZF <Enter>

  " Reoload vimrc
  nmap <Leader>rv :source ~/.vimrc<CR>

  " text insert shortcuts
  nmap <Leader><Leader>con :call InsertLine("console.log(  );")<CR>13li
  nmap <Leader><Leader>jso :call InsertLine("JSON.stringify( , null, 2 );")<CR>16li
  nmap <Leader><Leader>tc :call InsertLine("try {} catch {}")<CR>5li
  nmap <Leader><Leader>it :call InsertLine("it( '', () => {});")<CR>5li
  nmap <Leader><Leader>des :call InsertLine("describe( '', () => {});")<CR>11li
  nmap <Leader><Leader>wa :call InsertLine("const wait = ( ms ) => new Promise( r => setTimeout( r, ms ) );")<CR><CR>
  nmap <Leader><Leader>pgit :call InsertLine('    "": "git+ssh://git@github.com/edwmurph/three-globe#dev.git",')<CR><CR>

  " buffer shifts
  nmap <C-j> <C-e>
  nmap <C-k> <C-y>
  nmap <C-down> <C-e>
  nmap <C-up> <C-y>
  nmap <C-S-down> <C-d> zz
  nmap <C-S-up> <C-u> zz

  " prevent default shift cursor behavior of <space> in normal mode
  nmap <SPACE> <Nop>

  " space-# searches project for word under cursor
  nmap <Leader># :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

  " quick-fix navigations
  " next
  nmap <Leader>qn :cn <CR>
  " prev
  nmap <Leader>qp :cp <CR>
  " close quick-fix window
  nmap <Leader>qc :ccl <CR>

  " ctag navigation
  nmap <Leader>gd <C-]>
  nmap <Leader>gn :tn<CR>
  nmap <Leader>gp :tp<CR>
  nmap <Leader>go <C-t>

  " override / to use incsearch
  nmap / <Plug>(incsearch-forward)

  " align imports
  nmap <Leader>ea <Plug>(EasyAlign)

  " ale
  nmap <Leader>af :ALEFix<CR>
  nmap <leader>an :ALENext<cr>
  nmap <leader>ap :ALEPrevious<cr>

  " sync syntax
  nmap <Leader><Leader>s :syntax sync fromstart<Enter>

  " set hard tabs
  nmap <Leader><Leader>t :set expandtab!<Enter>


" VISUAL MODE

  " save file
  vmap <Leader>;<Leader> <Esc> :w <Enter>
  " normal mode
  vmap <Leader>; <Esc>

  " Ctrl-c copies visual selection to clipboard
  vmap <C-c> "*y

  " align imports
  vmap <Leader>ea <Plug>(EasyAlign)
  " // to search for visual selection
  vnoremap // y/<C-R>"<CR>

"---------- custom commands --------



"---------- autocommands --------
"
autocmd BufWritePost * :syntax sync fromstart
