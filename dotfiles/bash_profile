#!/bin/bash

# To use this .bash_profile, run the setup.sh script in this dir or just symlink this file to your home directory:
# ln -s ${HOME}/code/personal/configs/dotfiles/bash_profile ${HOME}/.bash_profile

. ~/code/personal/configs/dotfiles/bash_profile_helpers

source_if_exists "${HOME}/.secrets/secrets.sh"
source_if_exists "${HOME}/.secrets/env.sh"
source_if_exists "${HOME}/code/personal/configs/dotfiles/bash_profile_starry"
source_if_exists "${HOME}/code/personal/configs/dotfiles/bash_profile_fs"
source_if_exists "${HOME}/code/personal/configs/dotfiles/bash_profile_prompt"
source_if_exists "${HOME}/code/personal/configs/git-completion.bash"


### TERMINAL CONFIGS


if [ brew -v 2>/dev/null ] && [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi

# change name of title bar to the directory path in which new sessions are initiated
echo -ne "\033]0;"$(pwd | sed "s/^$(echo $HOME | sed 's/\//\\\//g')/~/g")"\007"

# change color of title bar to black
printf -- $'\033]6;1;bg;red;brightness;20\a\033]6;1;bg;green;brightness;20\a\033]6;1;bg;blue;brightness;20\a'

# use FZF
[ -f ~/.fzf.bash ] && source ~/.fzf.bash


### ALIASES


# native shortcuts
  alias ls='ls -G'
  alias ll='ls -la'
  alias tt="tree -a -L 10 -C -I 'node_modules|ui|coverage|target|.git|.nyc_output|*.swp|.cache|dist|bootstrap-sass|material-dashboard|.ipynb_checkpoints|__pycache__|public|build|.DS_Store'"
  alias ttt="tree -a -L 10 -C -I 'node_modules|ui|coverage|target|.git|.nyc_output|*.swp|.cache|dist|bootstrap-sass|material-dashboard|.ipynb_checkpoints|__pycache__|public|build|.DS_Store|test'"
  alias e="exit"
  # use homebrew's vim
  alias vim="/usr/local/Cellar/vim/8.1.0700/bin/vim"
  alias agq="ag --hidden -Q"
  alias agqt="ag --hidden --ignore=test -Q"
  alias agg="ag -g"

# git
  alias gs='git status'
  alias gp='git pull'
  alias gll="git log --pretty=format:'%C(yellow)%h|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' --date=format:'%Y-%m-%d %H:%M:%S'"
  alias gl="git log -n 20 --pretty=format:'%C(yellow)%h|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' --date=format:'%Y-%m-%d %H:%M:%S'"
  alias gcm="git checkout master"
  alias gc.="git checkout ."
  alias gr.="git reset ."
  alias gc="git checkout"
  alias gb="git branch -vv"
  alias gbdl="git branch | grep -v master | grep -v develop | xargs git branch -D"
  alias grr="git reset HEAD~1"
  alias gct="git commit -m 'temp commit'"
  alias gdm="git diff master -- . ':(exclude)package-lock.json'"
  alias gds="git diff --stat"
  # alias rmlocks="find . -maxdepth 2 -name package-lock.json -exec rm {} \;"

# navigation
  alias pcf='goto ~/code/personal/configs'
  alias pem='goto ~/code/personal/emurphy'
  alias pgb='goto ~/code/personal/gatsbyjs'
  alias pds='goto ~/code/personal/ds'
  alias pus='goto ~/code/personal/uss'

  alias co='goto ~/code'
  alias nv='goto ~/.nvm'
  alias se='goto ~/.secrets'

  alias personal='cd ~/Library/"Mobile Documents"/com~apple~CloudDocs/PERSONAL && echo -ne "\033]0;"~/...PERSONAL"\007"'
  alias documents='cd ~/Library/"Mobile Documents"/com~apple~CloudDocs/Documents && echo -ne "\033]0;"~/...Documents"\007"'

# npm
  alias nrtf="npm run test:functional"
  alias ns="npm start"
  alias nrd="npm run dev"
  alias nrw="npm run watch"

# python
  alias serve="python -m SimpleHTTPServer"
  alias nb="jupyter notebook"
  alias ds="conda activate ds && cds"

# ssh
  alias tess="ssh ${TESS_AWS_USERNAME}@tessandreola.com"

# ctags
  # use ctags from brew to enable the -R flag
  alias ctags="`brew --prefix`/bin/ctags"
  alias tag='ctags -R .'


# FUNCTIONS

function gsetup() {
  git config user.name 'edwmurph'
  git config user.email 'edwmurph3@gmail.com'
}

function mtf() {
  NODE_ENV=test mocha "$1" --exit
}


function s() {
  file=${1?file path is requied}
  if [ -n "$file" ]; then
    scala -nc "$file"
  fi
}

function v() {
  file="$(fzf)"
  if [ -n "$file" ]; then
    vim "$file"
  fi
  history -s vim "$file"
}

function vn() {
  file="$(find node_modules | fzf)"
  if [ -n "$file" ]; then
    vim "$file"
  fi
  history -s vim "$file"
}

# Connect to VC's vpn through anyconnect
function vpnVC() {
  # launchctl load /Library/LaunchDaemons/com.cisco.anyconnect.vpnagentd.plist 2> /dev/null
  printf "CustomerVPN\n${BFVPN_USERNAME}\n${BFVPN_PW}\n" |
    /opt/cisco/anyconnect/bin/vpn -s connect ${BFVPN_USERNAME}
}

# Disconnect from anyconnect vpn
function vpnD() {
  /opt/cisco/anyconnect/bin/vpn -s disconnect
  # launchctl unload /Library/LaunchDaemons/com.cisco.anyconnect.vpnagentd.plist 2> /dev/null
}

# function bsp() {
#   old='2.7.13'
#   new='3.6.4_3'
#   pythonVersion="$(/usr/local/bin/python --version | cut -d ' ' -f2)"
#   if [[ $new =~ $pythonVersion ]]; then
#     brew switch python $old
#   else
#     brew switch python $new
#   fi
# }

# Find and replace all strings in files (up to 2 directories deep) matching regex relative to current directory
# E.g. `far package.json '"node": "8.11.4"' '"node": "8.11.5"'`
# function far() {
# 	filename=${1?Expects filename as 1st parameter}
# 	regexpToFind=${2?Expects regexp to search for as 2nd parameter}
# 	replacementStr=${3?Expects string to replace matched regexps with as 3rd parameter}
# 	find . -name ${filename} -maxdepth 2 -exec sed -i '' -e "s/${regexpToFind}/${replacementStr}/g" {} \;
# }

function Hist() {
  git log --pretty=format:"%C(yellow)>>>|%h|%Cred%ad|%Cblue%an|%Creset%s" --date=format:"%Y-%m-%d %H:%M" -p ${1?must pass a file location for first arg} | sed -e '/>>>|/{n;N;N;N;d;}' | sed -e 's/\(^-.*$\)/'$(printf "\033[91m")'\1'$(printf "\033[0m")'/g' | sed -e 's/\(^+.*$\)/'$(printf "\033[92m")'\1'$(printf "\033[0m")'/g'
}

function gd() {
  git diff "${2-HEAD}" -- "${1-.}" ':(exclude)*package-lock.json' ':(exclude)*yarn.lock'
}

function gdd() {
  git diff HEAD^ -- "${1-.}" ':(exclude)*package-lock.json' ':(exclude)*yarn.lock'
}

# function dif() {
#   git diff --no-index -- "${1?Must provide 1st arg that points to a file}" "${2-Must provide 2nd arg that points to a file}"
# }

# helper to transfer files to server
# function gfc() {
#   # TODO add logic to make this detect error of not being on local network and automatically try using the rourter's IP
#   path_on_remote="${1?arg1 missing: path to file on Celery}"
#   local_destination_path="${2?arg2 missing: path to where to transfer file to on local machine}"
#   scp "edwmurph@${CELERY_IP}:${path_on_remote}" "${local_destination_path}"
# }

### NODE

NVM_DIR=~/.nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[[ "$PATH" == *"./node_modules/.bin"* ]] || PATH="$PATH:./node_modules/.bin"
# export NODE_PATH="/Users/edwmurph/.nvm/versions/node/v11.3.0/lib/node_modules"
# PATH="$PATH:/Users/edwmurph/.nvm/versions/node/v11.3.0/lib/node_modules"



### BAT


export BAT_THEME=TwoDark


### PYTHON


PATH="${HOME}/anaconda/bin:$PATH"


### GO


GOPATH="$HOME/go"
PATH="$PATH:$GOPATH/bin"


### FZF


export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'


# added by Anaconda3 2018.12 installer
# >>> conda init >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$(CONDA_REPORT_ERRORS=false '/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
if [ $? -eq 0 ]; then
    \eval "$__conda_setup"
else
    if [ -f "/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/anaconda3/etc/profile.d/conda.sh"
        CONDA_CHANGEPS1=false conda activate base
    else
        \export PATH="/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda init <<<


### POST OPS
source_if_exists "${HOME}/code/personal/configs/dotfiles/bash_profile_context"
